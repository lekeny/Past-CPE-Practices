/*Completely Working!*/

#include <iostream>
#include <string>
#include <vector>

int NumPool[1000];
int QueryPool[25];
int numPoolSize;
int queryPoolSize;
std::vector<std::string> outputStorage;
int outputStorageIndex = 0;
std::string outputBeforeStorage;
int casecount = 0;

void makeNumPool(int numOfInputs);

void makeQueryPool(int numOfQuery);

void makeClosestSums(int *numPoolArray, int *queryPoolArray);

void flushArray(int *nameOfArray, int sizeOfArray);

void showArray(int *nameOfArray, int sizeOfArray);

void storeOutput(std::string output);

void printAllOutput(void);


int main()
{
   outputStorage.resize(1);
   int input;
   while ( 1 )
   {   
       casecount++;
       std::cin >> input;
       if ( input == 0 )
       {
            printAllOutput();
            return 0;
       }
       else
          makeNumPool(input);
   
   
       std::cin >> input;
       if ( input == 0 )
       {
            printAllOutput();
            return 0;
       }
       else
          makeQueryPool(input);

       outputBeforeStorage = "Case " + std::to_string(casecount) + ":";
       
       storeOutput(outputBeforeStorage);
       
       makeClosestSums(NumPool, QueryPool);
       
       flushArray(NumPool, numPoolSize);
   }
   
   return 0;
}

void makeNumPool(int numOfInputs)
{
    numPoolSize = numOfInputs;
    for(int i = 0; i < numOfInputs; i++)
    {
        std::cin >> NumPool[i];
    }
}

void makeQueryPool(int numOfQuery)
{
    queryPoolSize = numOfQuery;
    for(int i = 0; i < numOfQuery; i++)
    {
        std::cin>> QueryPool[i];
    }
}

void makeClosestSums(int *numPoolArray, int *queryPoolArray)
{
    int smallestdiff = 1500;
    int diff = 1500;
    int sum = 0;
    int smallestsum = 0;
    for (int i = 0 ; i < queryPoolSize; i++)
    {
       for(int k = 0; k < numPoolSize; k++)
        {
         for(int q = k+1; q < numPoolSize; q++)
            {
               sum = NumPool[k] + NumPool[q];
                diff = sum - QueryPool[i];
                if (diff < 0)
                    diff = diff * -1;
               if (diff < smallestdiff)
                {
                    smallestdiff = diff;
                    smallestsum = sum;
                }
            }
        }
        outputBeforeStorage = "Closest sum to " + std::to_string(QueryPool[i]) + " is " + std::to_string(smallestsum) + ".";
        storeOutput(outputBeforeStorage);
        smallestdiff = 1500;
        smallestsum = 0;
    }
}

void flushArray(int *nameOfArray, int sizeOfArray)
{
    for(int i = 0; i < sizeOfArray; i++)
    {
        nameOfArray[i] = 0;
    }
}

void showArray(int *nameOfArray, int sizeOfArray)
{
    for(int i = 0; i < sizeOfArray; i++)
    {
        std::cout << nameOfArray[i] << " ";
    }
}

void storeOutput(std::string output)
{
    outputStorage.at(outputStorageIndex) = output;
    outputStorageIndex++;
    outputStorage.resize(outputStorageIndex + 1);
}

void printAllOutput(void)
{
    for(int i = 0; i <= outputStorageIndex; i++)
    {
        std::cout << outputStorage.at(i) << std::endl;
    }
}
